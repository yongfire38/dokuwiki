====== JailbreakDetection API 가이드 프로그램 ======

===== 개요 =====

JailbreakDetection API 가이드 개요

==== 특징 ====
본 가이드 프로그램 에서는 디바이스의 루팅 및 탈옥 정보 조회 기능의 활용을 가이드 할 수 있도록 **기기 검사 하기**, **인식결과 조회** 를 제공하고 있다. \\

==== 기능흐름도 ====
{{:egovframework:hyb3.6:guide:mbl:jailbreakdetection:jailbreakdetection_4.jpeg?600|}}

==== 전제 조건 ====

^           구분            ^             내용             ^
|Local 디바이스 개발 환경|전자정부표준프레임워크 개발환경3.6, Android SDK API 23(version 6.0 Marshmallow)|
|서버 사이드 개발 환경|전자정부표준프레임워크 개발환경3.6|
|Mash up Open API 연계|N/A|
|테스트 디바이스 |Galaxy S2, G5|
|테스트 플랫폼 |Android 2.3, Android 6.0 |
|추가 라이브러리 적용|N/A|

==== 제약사항 ====

^           구분            ^             내용             ^
|지원 디바이스 및 플랫폼|N/A|
|크로스 도메인 사용|폰갭에서 특정 외부 도메인이나 외부 도메인의 하위 도메인을 사용해야할 경우,\\ Res/xml/config.xml에서 <access origin="" />에 외부 도메인 주소를 추가 설정해야 외부 도메인에 접속할 수 있다.|
|라이선스|N/A|

===== 설명 ===== 
JailbreakDetectionAPI 가이드 프로그램은 크게 **기기검사 하기**, **인식결과 조회** 기능으로 구성되어 있다.(관련기능 부분참조)

==== Device Application ====

=== 관련 소스 ===

^유형^대상소스명^비고^
|Activity|kr.go.egovframework.hyb.DeviceInfoapi.JailbreakDetectionAPIGuide_AndroidActivity|JailbreakDetectionAPI 가이드 프로그램 Activity Class|
|CSS|assets/www/css/egovframwork/mbl/hyb/JailbreakDetectionAPI.css |JailbreakDetection 가이드 프로그램 주요 Cascading Style Sheets|
|IMAGE |assets/www/images/egovframwork/mbl/hyb/ |JailbreakDetection 가이드 프로그램 주요 Image 폴더|
|JS |assets/www/js/egovframwork/mbl/hyb/JailbreakDetection.js |JailbreakDetection 가이드 프로그램 주요 JavaScript|
|JS |assets/www/js/egovframwork/mbl/hyb/messages_ko.js |Validate 메세지 처리 JavaScript|
|RES |assets/www/res/ |JailbreakDetection 가이드 프로그램 주요 Resource 폴더|
|XML |AndroidManiFest.xml |안드로이드 어플리케이션 설정 XML|
|HTML|assets/www/JailbreakDetection.html|JailbreakDetection 메인 페이지|
|HTML|assets/www/intro.html|JailbreakDetection Intro 페이지|
|HTML|assets/www/license.html|JailbreakDetection 라이센스 페이지|
|HTML|assets/www/overview.html|JailbreakDetection 기능설명 페이지|

=== 활용 API ===

== JailbreakDetection ==
  * 모바일 디바이스의 하드웨어 및 소프트웨어 관련 메타 정보를 조회한다.


<code>
	var cordova= device.cordova;
	var platform = device.platform;
	var uuid = device.uuid;
	var version = device.version;
        var isDevicesRooted;
</code>


^변수^설명^비고^
|cordova|어플리케이션에서 사용된 폰갭 버전을 반환한다.| |
|platform|모바일 디바이스의 플랫폼 정보를 반환한다.| |
|uuid|디바이스 고유의 UUID를 반환한다.| |
|version|디바이스의 플랫폼 버전을 반환한다.| |
|isDevicesRooted|디바이스에 루팅 및 탈옥 결과정보를 반환한다.| |

== Event[batterycritical] == 
  * 배터리 상태가 Critical 레벨에 도달 했을때 호출되는 콜백함수 정의
<code>
window.addEventListener("batterycritical", yourCallbackFunction, false);
</code>

== Event[batterylow] == 
  * 배터리 상태가 Low 레벨에 도달 했을때 호출되는 콜백함수 정의
<code>
window.addEventListener("batterylow", yourCallbackFunction, false);
</code>

== Event[batterystatus] == 
  * 배터리 상태에 변화가 감지되면 호출되는 콜백함수 정의
<code>
window.addEventListener("batterystatus", yourCallbackFunction, false);
</code>

==== Server Application ====

=== 관련 소스 ===

^유형^대상소스명^비고^
|Controller|egovframework.hyb.mbl.jai.web.EgovJailbreakDetectionDeviceAPIController.java|JailbreakDetectionAPI 가이드 프로그램 Controller Class|
|Service|egovframework.hyb.add.dvc.service.EgovJailbreakDetectionDeviceAPIService.java|JailbreakDetectionAPI 가이드 프로그램  Service Class|
|ServiceImpl|egovframework.hyb.add.dvc.service.impl.EgovJailbreakDetectionDeviceAPIServiceImpl.java|JailbreakDetectionAPI 가이드 프로그램  ServiceImpl Class|
|VO|egovframework.hyb.add.dvc.service.JailbreakDetectionDeviceAPIVO.java|JailbreakDetectionAPI 가이드 프로그램 VO Class|
|DAO|egovframework.hyb.add.dvc.service.impl.JailbreakDetectionDeviceAPIDAO.java|JailbreakDetectionAPI 가이드 프로그램 Dao Class|
|QUERY XML|resources/egovframework/sqlmap/hyb/add/dvc/EgovJailbreakDetectionDeviceAPIGuide_SQL_xxx.xml|JailbreakDetectionAPI 가이드 프로그램 QUERY XML|


=== 관련 테이블 ===
^테이블명^테이블명(영문)^비고^
|탈옥정보|detection|탈옥 및 루팅 정보 관리|

=== 테이블 정의서 ===

   * DETECTION

^No^컬럼ID^컬럼명^타입^길이^NULL^
|1|SN|일련번호|NUMERIC|6|NotNull|
|2|UUID|UUID|VARCHAR|45|NotNull|
|3|OS|OS|VARCHAR|45|NotNull|
|4|PG_VER|폰갭버전|VARCHAR|45|NotNull|
|5|DETECTION|탈옥여부|VARCHAR|45|NotNull|

=== ERD ===
{{:egovframework:hyb3.6:guide:mbl:newapi_erd.jpg?990|}}

===== 환경설정 ===== 

JailbreakDetection 디바이스API 가이드 프로그램에서 제공하는 모바일 디바이스의 메타 정보 조회 기능을 활용하기 위하여 필요한 항목 및 그 환경 설정은 다음과 같다.

==== Device Application ====

=== res/xml/config.xml ===

<code xml>
    <!--전자정부 Interface 디바이스 API를 사용하기 위한 Phonegap Plugin 클래스-->
    <plugin name="EgovInterfacePlugin" value="kr.go.egovframework.hyb.plugin.EgovInterfacePlugin" />
</code>

=== res/values/serverinfo.xml ===

<code xml>
    <!--전자정부 Interface 디바이스 API에서 사용하기 위한 서버경로 설정-->
    <?xml version="1.0" encoding="utf-8"?>
    <resources>
	<string name="SERVER_URL">http://192.168.100.222:8080/DeviceAPIGuideTotal_Web_V1.7.1</string>
    </resources>
</code>

=== AndroidManifest.xml ===

<code xml>
	<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
	<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" /> 
</code>


==== Server Application ====

=== resource/egovframework/sqlmap/sql-map-config_[DB명].xml ===
<code xml>
<sqlMap resource="egovframework/sqlmap/hyb/mbl/jai/EgovDeviceAndroidAPIGuide_SQL_[DB명].xml"/>
</code>

===== 관련기능 ===== 
JailbreakDetectionAPI 가이드 프로그램은 크게 디바이스 내 메타 정보 조회 기능과 조회된 메타 정보를 서버에 전송하고 조회할수 있는 기능으로 구성되어 있다.

==== JailbreakDetectionAPI 정보 조회하기 ====

=== 비즈니스 규칙 ===
  * 네트워크를 체크하여 Wi-Fi가 아닐 경우에는 사용자 승인여부에 따라 동작한다.


=== 관련 코드 ===

== 디바이스 정보 VO ==
<code>
/** 디바이스 정보  VO */
var deviceInfoVO = {
    sn : "",
    uuid : "",
    os : "",
    pgVer : "",
    detection : ""
}

</code>

== 디바이스 정보 및 탈옥/루팅 화면 표시 ==
<code>
function fn_egov_detectio(){
	 
	 
	 var successCallback = function (result) {
		 var  isDevicesRooted = result == 1;
			
						
		    $('.deviceInfo:eq(0)').html(device.platform + " " + device.version);
		    $('.deviceInfo:eq(1)').html(device.uuid);
		    $('.deviceInfo:eq(2)').html(device.cordova);    
		    $('.deviceInfo:eq(3)').html(" " + isDevicesRooted);
	
		};
		var errorCallback = function (error) {
		    console.error(error);
		   
		};
		
		rootdetection.isDeviceRooted(successCallback, errorCallback);
		
		 $.mobile.changePage('#deviceInfo', 'slide', false, false);
		    infoScroll.refresh();
} 
</code>

== 네트워크 정보 조회 ==
<code>
function fn_egov_get_networkInfo() {
    var networkState = navigator.network.connection.type;
    
    var states = {};
    states[Connection.UNKNOWN]  = 'Unknown connection';
    states[Connection.ETHERNET] = 'Ethernet connection';
    states[Connection.WIFI]     = 'WiFi connection';
    states[Connection.CELL_2G]  = 'Cell 2G connection';
    states[Connection.CELL_3G]  = 'Cell 3G connection';
    states[Connection.CELL_4G]  = 'Cell 4G connection';
    states[Connection.NONE]     = 'No network connection';
    
    return states[networkState];
    
}
</code>

=== 관련 화면 및 수행매뉴얼 ===

^디바이스 정보조회 화면^
|{{:egovframework:hyb3.6:guide:mbl:jailbreakdetection:jailbreakdetection_2.jpeg?320|}}|

OS: 플랫폼 정보 및 버전 \\
UUID : 디바이스의 고유 아이디 \\
PhoneGap Version : jailbreakdetection가이드 프로그램에 적용된 폰갭 버전 \\
Jailbreak Detection : 디바이스의 탈옥 및 루팅 여부 \\

==== jailbreakdetection 정보 서버에 전송하기 ====

=== 비즈니스 규칙 ===
  * 네트워크를 체크하여 Wi-Fi가 아닐 경우에는 사용자 승인여부에 따라 동작한다.
  * 디바이스 정보의 서버 전송은 InterfaceAPI를 이용한다.

=== 관련 코드 ===

== jailbreakdetection 정보 등록==
<code>

function fn_egov_save_detectioInfo(){
	
	var url = "/jai/addJailbreakDetectionDeviceInfo.do";
	
	var d_os = $(".deviceInfo:eq(0)").text();
	var d_uuid = $(".deviceInfo:eq(1)").text();
	var d_pg_ver = $(".deviceInfo:eq(2)").text();
	var d_detection = $(".deviceInfo:eq(3)").text();
	
	console.log("os > " + d_os + "\n uuid >>>  " + d_uuid + "\n pg_ver : >>>>" + d_pg_ver + "<<<<<< \n detection >>" + d_detection + "<<<<");
	
	var params = {
			os : d_os,
			uuid : d_uuid,
			pgVer : d_pg_ver,
			detection : d_detection		
	};

	window.plugins.EgovInterface.request(url, params, function(jsondata) {
		console.log("jsondata > " + jsondata);

		if (jsondata.resultState == "OK") {
			console.log("send  ok");
		} else {
			$("#alert_dialog").click(function() {
				jAlert('데이터 전송 중 오류가 발생 했습니다.', '전송 오류', 'c');
			});
		}

	}, function(result) {
		console.log("error > " + result);
	});

	console.log("JailbreakDetectionDeviceInfo fn_egov_save_detectioInfo request Completed");
	
	$.mobile.changePage("#main", "slide", false, false);
	detailScroll.refresh();
	
}
</code>

=== 관련 화면 및 수행매뉴얼 ===

^Action^URL^Controller method^QueryID^
|JailbreakDetection정보 등록|/jai/addJailbreakDetectionDeviceInfo.do|insertDeviceInfo|"jailbreakDetectionDeviceAPIDAO.insertJailbreakDetectionDevcie"|

정보 업로드: JailbreakDetection 결과 정보를 서버로 업로드 한다.

==== JailbreakDetection 정보 목록 조회하기 ====

=== 비즈니스 규칙 ===
  * 네트워크를 체크하여 Wi-Fi가 아닐 경우에는 사용자 승인여부에 따라 동작한다.

=== 관련 코드 ===

== 디바이스 정보 목록 조회 ==

<code>
	function fn_egov_move_JailbreakDetectionInfoList() {
	    var url = "/jai/JailbreakDetectionInfoList.do";
	    var accept_type = "json";    
	    
	    var params = {
				uuid : device.uuid,
				};
	    // get the data from server
	    window.plugins.EgovInterface.request(url, params, function(jsonData) {
	        var list_html = "";
	        
	        $(jsonData["JailbreakDetectionDevcieList"]).each(function(idx,obj){
	            var sn = obj.sn;
	            var uuid = obj.uuid;
	            var os = obj.os;
	            var pgVer = obj.pgVer;
	            var detection = obj.detection;
	            

	            console.log("uuid >>>> " + uuid + "\n os >>>>>>> " + os + "\n pgVer >>> " + pgVer + "<<<<<<" + "\n detection >>> " + detection + "<<<<<<");
	            
	            list_html += "<li><h3>UUID : " + uuid + "</h3>";
	            list_html += "<p><strong>OS : " + os + "</strong></p>";
	            list_html += "<p><strong>Version : " + pgVer + "</strong></p>";
	            list_html += "<p>Detection : " + detection + "</p></li>";
	        });
	        
	        console.log("JailbreakDetectionAPIGuide fn_egov_move_JailbreakDetectionInfoList request Completed");
	        
	        var theList = $('#JailbreakDetectionList');
	        theList.html(list_html);
	        $.mobile.changePage("#JailbreakDetectionInfoList", "slide", false, false);
	        theList.listview("refresh");
	        detailScroll.refresh();
	        listScroll.refresh();
	        
	    });    
	}
</code>


=== 관련 화면 및 수행매뉴얼 ===

^Action^URL^Controller method^QueryID^
|JailbreakDetection 정보 목록 조회|/jai/JailbreakDetectionInfoList.do|selectJailbreakDetectionDevcieList|"jailbreakDetectionDeviceAPIDAO.selectJailbreakDetectionDevcieList"|

^디바이스 정보목록 조회 화면^
|{{:egovframework:hyb3.6:guide:mbl:jailbreakdetection:jailbreakdetection_3.jpeg?320|}}|

 메인화면 이동 : 메인 페이지를 호출한다.\\


===== 컴파일 디버깅 배포 ===== 
==== 컴파일 ====

=== DevicdInfoAPI Device Applicaton 컴파일 방법 === 

  * 프로젝트 선택 > 오른쪽 클릭 > Run As > Android Application

{{:egovframework:hyb:guide:add:카메라_컴파일1.png?740|}}

  * 상단의 메뉴 > Run As > Android Application

{{:egovframework:hyb:guide:add:카메라_컴파일2.png?740|}}

 
  * 실행할 타겟 선택 > 에뮬레이터, 디바이스(디버깅모드)

{{:egovframework:hyb:guide:add:디바이스컴파일.png?740|}}


  * 디바이스를 이용한 실행 화면

{{:egovframework:hyb3.6:guide:mbl:jailbreakdetection:jailbreakdetection_5.jpeg?320|}}

=== JailbreakDetectionAPI Server Applicaton 컴파일 방법 ===  


  * JailbreakDetectionAPI 서버사이드 가이드 프로그램의 실행은 프로젝트를 마우스 오른쪽 버튼을 클릭 한후 Run As>Run On Server 버튼을 통해 실행 할 수 있다.

{{:egovframework:hyb:guide:ios:서버실행.png?640|}}

  * 빌드가 성공적으로 수행 되면 이클립스의 콘솔 창에서 'Server Startup in xxx ms' 메시지를 확인 할 수 있다.
{{:egovframework:hyb:guide:add:서버실행결과_콘솔.png?840|}}


==== 디버깅 ====

디바이스 어플리케이션에서 발생한 오류 내용 확인 및 디버깅을 위해서는 폰갭 프레임워크에서 제공하는 console.log를 이용할 수 있다. console.log 함수는 자바스크립트 구문에서 사용할 수 있는 디버그 코드로 이클립스 및 Xcode에서 확인 할 수 있다.
 

console.log의 작성 방법의 예시는 다음과 같다.
<code>
function fn_egov_network_check(doCheck)
{
    console.log('DeviceAPIGuide fn_egov_network_check');
    var networkState = navigator.network.connection.type;
    ...
}
</code>

 디버깅 코드가 실행 되면 아래와 같은 메시지를 개발도구의 콘솔 메시지 창에서 볼 수 있다.

 {{:egovframework:hyb:guide:add:FileReadWriteconsolelog.png|}}

JailbreakDetection 디바이스 API 가이드 프로그램 에서는 디버깅을 위하여 다음과 같이 콘솔 정보를 출력한다.


==== 배포 ====
JailbreakDetection 디바이스 API 가이드 다운로드 : [[http://www.egovframe.go.kr/cop/bbs/selectBoardArticle.do?bbsId=BBSMSTR_000000000161&nttId=1289&menu=3&submenu=9|Click]] \\

===== 참고자료 ===== 
  * Cordova 플러그인 정보(iOS) : cordova plugin add cordova-plugin-jailbreak-detection[[https://www.npmjs.com/package/cordova-plugin-jailbreak-detection|Click]] \\
  * Cordova 플러그인 정보(Android) : cordova plugin add cordova-plugin-root-detection[[https://www.npmjs.com/package/cordova-plugin-root-detection|Click]] \\