===== 개요 ===== 
메이븐은 POM에서 선언적인 dependency 설정으로 빌드 및 배포 시에 필요한 라이브러리들을 관리하고 \\ 
로컬 및 원격 저장소에서 선언된 라이브러리들을 다운로드 받아 사용한다.

===== 설명 ===== 
메이븐의 가장 큰 장점 중의 하나로 라이브러리 의존성 관리를 들 수 있다. 일반적인 프로젝트 수행 시 개발자들은 라이브러리 설정을 위해 프로젝트 내부 디렉터리에 직접 라이브러리를 받아와 위치 시키고 path 설정을 통해 이를 이용한다. 이럴 경우 개발자들이 직접 라이브러리를 찾고 설정하는 번거로움과 프로젝트 내부에서 사용하는 라이브러리 종류와 버전을 컨트롤 하는데 문제가 발생할 수 있다. 특히 통합 빌드 과정에서 라이브러리 관련 문제들이 빈번히 발생할 수 있다. 메이븐은 이를 효과적으로 처리하기 위해 의존성 관리 메커니즘을 제공하고 있으며 메이븐 개발자들은 프로젝트의 pom.xml에 dependency 선언만으로 필요한 라이브러리들을 받아와 편하게 사용할 수 있다. 프로젝트 관리자의 경우 사용되고 있는 라이브러리와 버전을 효과적으로 컨트롤할 수 있으며 개발자들에게 검증되고 통일된 버전의 라이브러리를 제공할 수 있다. 

예) 아래와 같이 선언하여 junit 테스트를 위한 라이브러리를 사용할 수 있다. 
<code:xml>
  <project>
    ......
    <dependencies>
      <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.4</version>
        <scope>test</scope>
      </dependency>
    </dependencies>
  </project
</code>

==== 의존성 분석 순서 ==== 
    - 로컬 저장소에서 의존성 확인
    - 원격 저장소 리스트에서 의존성 확인  
    - 1과 2가 실패하면 의존성 에러 보고 

==== 의존성 필수 선언 항목 ==== 
    - <groupId>: 부분적인 프로젝트나 조직에서의 라이브러리 집합을 식별하기 위해 제공한다.
    - <artifactId>: 프로젝트의 실제 이름으로 groupId와 합쳐져 프로젝트 식별에 쓰인다.
    - <version>: 선언한 의존성 artifact의 버전으로 프로젝트 내에서 사용하는artifcat의 일관성을 추구할 수 있다.

==== 의존성 SCOPE ==== 
    - compile: 기본값으로 모든 클래스 패스에서 사용 가능하다.
    - provided: 컴파일과 유사하나 패키지에는 포함되지 않는다. 컨테이너나 JDK에서 제공한다. 예) Servlet  API for web apps
    - runtime: 컴파일러가 아닌 런타임 시에 사용된다. 예) JDBC dirvers
    - test: 테스트 단계에서만 사용된다. 예)Junit
    - system: provided와 유사하나 개발자가 직접 JAR 파일을 제공해야 하고 저장소에서 지정한 dependency를 찾지 않는다. 


===== 사용법 ===== 
pom.xml 파일에서 dependency를 설정할 수 있다. \\
==== 1. Dependency Management ====

==== 2. System Dependencies ====



